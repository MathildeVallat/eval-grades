---
title: "subject-17"
author: "Mathilde Vallat"
format:
  html: default
  pdf: default
---

```{r}
#| message: false
here::i_am("eval-grades.Rproj")
library(here)
library(readr)
library(ggplot2)
library(dplyr)
library(tidyr)
theme_set(theme_bw())

```

## Question 1

Load the data set.

```{r}
grades <- read_delim(here("data", "grades.csv"))

```

## Question 2

Give the number of grades in the data set directly in the text of your quarto file, in a sentence of the form “The data set contains xxx grades.” where xxx is replaced by the number of grades. This must be computed from the data set.

```{r}
total_grades <- nrow(grades)
```

The data set contains 44195 grades.

## Question 3

Use distinct() compute the number of students on the data set and report the value directly in the text as in the previous question.

```{r}
num_students <- grades |> distinct(id) |> summarise(count = n()) |> pull(count)

```

The data set contains 761 students.

## Question 4

```{r}
students <- grades |> distinct(id, group)

students |> slice_head(n = 5) |> knitr::kable()
```

## Question 5

```{r}
grades |> 
  distinct(id, group) |> 
  count(group) |> 
  ggplot(aes(x = group, y = n)) + 
  geom_col() + 
  labs(title = "Number of Students per Group", x = "Group", y = "Student Count")
```

## Question 6

```{r}
grades |>
  filter(course == "Art and Expression in a Post-Apocalyptic World") |>
  group_by(group) |>
  summarise(avg_grade = mean(grade, na.rm = TRUE)) |>
  ggplot(aes(x = group, y = avg_grade)) +
  geom_col() +
  labs(title = "Average Grade in Art and Expression by Group", x = "Group", y = "Average Grade")
```

## Question 7

```{r}
grades |> 
  ggplot(aes(x = grade, fill = factor(semester))) + 
  geom_density(alpha = 0.5) +
  labs(title = "Grade Distribution by Semester", x = "Grade", fill = "Semester")
```

## Question 8

```{r}
grades_per_student <- grades |> 
  group_by(id, group) |> 
  summarise(num_grades = n(),.groups = "drop")

grades_per_student |> slice_head(n = 5) |> knitr::kable()

min_grades <- min(grades_per_student$num_grades)
max_grades <- max(grades_per_student$num_grades)
avg_grades <- mean(grades_per_student$num_grades)
med_grades <- median(grades_per_student$num_grades)
```

Summary statistics for the number of grades per student:

| Minimum        | Maximum        | Average                  | Median         |
|----------------|----------------|--------------------------|----------------|
| 50 | 60 | 58.075 | 58 |

## Question 9

```{r}
combat_grades <- grades |>
  filter(course == "Combat Tactics and Self-Defense") |>
  group_by(id, group) |>
  summarise(num_grades = n(), .groups = "drop")

combat_grades |> slice_head(n = 5) |> knitr::kable()
```

## Question 10

```{r}
grade_distribution <- combat_grades |> 
  count(num_grades)

grade_distribution |> 
  ggplot(aes(x = num_grades, y = n)) +
  geom_col() +
  labs(title = "Distribution of Grades Count in Combat Tactics and Self-Defense", 
       x = "Number of Grades", y = "Student Count") +
  theme_minimal()
```

## Question 11

```{r}
combat_grades |> 
  ggplot(aes(x = factor(group), y = num_grades)) +
  geom_boxplot() +
  labs(title = "Grades per Student in Combat Tactics by Group", x = "Group", y = "Number of Grades")
```
It seems like yes, the number of grades per student in Combat Tactics and Self-Defense does depend on the group.

## Question 12

```{r}
avg_grades_per_course <- grades |>
  group_by(id, group, course) |>
  summarise(avg_grade = mean(grade, na.rm = TRUE), .groups = "drop") |>
  pivot_wider(names_from = course, values_from = avg_grade)

avg_grades_per_course |> select(id, group, starts_with("Art"), starts_with("Combat")) |> 
  slice_head(n = 5) |> knitr::kable()
```

## Question 13

```{r}
avg_grades_per_course |>
  ggplot(aes(x = `Scavenging and Resource Management`, 
             y = `Post-Apocalyptic History and Archaeology`)) +
  geom_point(alpha = 0.5, color = "black", size = 2) +
  geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed")
  labs(title = "Average Grades: History vs. Scavenging", x = "Scavenging", y = "History")


```

## Question 14

```{r}
correlations <- avg_grades_per_course |>
  group_by(group) |>
  summarise(correlation = cor(`Combat Tactics and Self-Defense`, `Scavenging and Resource Management`))
```

## Question 15

```{r}
most_corr_group <- correlations |> filter(abs(correlation) == max(abs(correlation))) |> pull(group)

avg_grades_per_course |>
  filter(group == most_corr_group) |>
  ggplot(aes(x = `Scavenging and Resource Management`, y = `Combat Tactics and Self-Defense`)) +
  geom_point(size = 4, alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed")
  labs(title = "Grades in Most Correlated Group", x = "Scavenging", y = "Combat Tactics")
```

## Question 16

```{r}

# Calculate average grade per course for each student
avg_grades_per_course <- grades |>
  group_by(id, group, course) |>
  summarise(avg_grade = mean(grade, na.rm = TRUE), .groups = "drop")

# Calculate the final grade as the average of the course averages
final_grades <- avg_grades_per_course |>
  group_by(id, group) |>
  summarise(final_grade = mean(avg_grade, na.rm = TRUE), .groups = "drop") |>
  arrange(desc(final_grade))

# Display the top 5 rows
final_grades |> slice_head(n = 5) |> knitr::kable()

```


## Question 17

```{r}
final_grades |> 
  ggplot(aes(x = factor(group), y = final_grade)) +
  geom_boxplot() +
  labs(title = "Comparison of Final Grades by Group", x = "Group", y = "Final Grade") +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16), # Center title and increase font size
    axis.text = element_text(size = 10), # Larger axis text
    axis.title = element_text(size = 12) # Larger axis title
  )
```

## Question 18

```{r}
# Average grade per course per student
avg_grades_per_course <- grades |>
  group_by(id, group, course, semester) |>
  summarise(avg_grade = mean(grade, na.rm = TRUE), .groups = "drop")

# Calculate if each student passes each course (average grade >= 5 for each course)
course_pass <- avg_grades_per_course |>
  group_by(id) |>
  summarise(course_pass = all(avg_grade >= 5))

# Calculate the semester averages and check if each semester's average is >= 10
semester_pass <- avg_grades_per_course |>
  group_by(id, semester) |>
  summarise(semester_avg = mean(avg_grade, na.rm = TRUE), .groups = "drop") |>
  group_by(id) |>
  summarise(semester_pass = all(semester_avg >= 10))

# Combine passing conditions and calculate the final pass status
pass_status <- final_grades |>
  left_join(course_pass, by = "id") |>
  left_join(semester_pass, by = "id") |>
  mutate(pass = course_pass & semester_pass) |>
  select(id, group, final_grade, pass)

# Display the top 5 rows
pass_status |> slice_head(n = 5) |> knitr::kable()

```

## Question 19

```{r}
# Count students who do not pass but have a final grade >= 10
non_passing_high_grade <- pass_status |> 
  filter(!pass & final_grade >= 10) |> 
  count()

# Display the count of such students
non_passing_high_grade
```

## Question 20

```{r}
# Calculate pass rate per group
pass_rate <- pass_status |>
  group_by(group) |>
  summarise(pass_rate = mean(pass, na.rm = TRUE))

pass_rate |> slice_head(n = 5) |> knitr::kable()

# Plot pass rate by group
library(ggplot2)
library(scales) # For percent formatting

# Plot with enhanced readability and aesthetics
pass_rate |> 
  ggplot(aes(x = factor(group), y = pass_rate, fill = pass_rate)) +
  geom_col(width = 0.7, color = "black") + # Adjust bar width and add border color
  geom_text(aes(label = scales::percent(pass_rate, accuracy = 1)), 
            vjust = -0.5, size = 4, color = "black") + # Add percentage labels above bars
  labs(title = "Pass Rate per Group", x = "Group", y = "Pass Rate") +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, 1)) + # Set y-axis from 0 to 100%
  scale_fill_gradient(low = "skyblue", high = "darkblue") + # Gradient fill to highlight pass rates
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"), # Center title and make it bold
    axis.text.x = element_text(size = 10), # Increase x-axis text size
    axis.text.y = element_text(size = 10), # Increase y-axis text size
    axis.title.x = element_text(size = 12), # x-axis title size
    axis.title.y = element_text(size = 12), # y-axis title size
    legend.position = "none" # Remove legend for a cleaner look
  )
```


